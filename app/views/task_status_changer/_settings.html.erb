<!-- /path/to/redmine/plugins/task_status_changer/app/views/settings/task_status_changer_settings.html.erb -->
<style>
    .scroll-wrapper {
        overflow-x: auto; /* Включает горизонтальную прокрутку, если содержимое шире контейнера */
        width: 100%; /* Полная ширина родительского элемента */
    }
    table {
        min-width: 1200px; /* Минимальная ширина таблицы, при необходимости измените в соответствии с вашими нуждами */
    }
</style>

<h3>Status Transition Rules</h3>
<div class="scroll-wrapper">
  <table id="status-transition-rules">
  <thead>
  <tr>
    <th>Имя кнопки</th>
    <th>Текущий статус задачи</th>
    <th>Новый статус задачи</th>
    <th>Кастомное поле</th>
    <th>Проверка пользователя</th>
    <th>Назначение пользователя</th>
    <th>Действия</th>
  </tr>
  </thead>
  <tbody>
  <% settings = Setting.plugin_task_status_changer['status_transition_rules'] || [] %>
  <% settings.each_with_index do |(index, rule), i| %>
    <% rule = rule.with_indifferent_access %>
    <tr class="status-rule" data-index="<%= i %>">
      <td>
        <%= text_field_tag "settings[status_transition_rules][#{i}][button_label]", rule['button_label'], maxlength: 24 %>
      </td>
      <td>
        <%= select_tag "settings[status_transition_rules][#{i}][current_status]",
                       options_from_collection_for_select(IssueStatus.all, 'id', 'name', rule['current_status']) %>
      </td>
      <td>
        <%= select_tag "settings[status_transition_rules][#{i}][new_status]",
                       options_from_collection_for_select(IssueStatus.all, 'id', 'name', rule['new_status']) %>
      </td>
      <td>
        <%= select_tag "settings[status_transition_rules][#{i}][custom_field_id]",
                       options_from_collection_for_select(CustomField.where(type: 'IssueCustomField'), 'id', 'name', rule['custom_field_id']) %>
      </td>
      <td>
        <%# Подготовка данных для выпадающего списка пользователей и групп %>
        <% sorted_users = User.active.sorted.to_a %>
        <% sorted_groups = Group.all.sorted.to_a %>
        <% all_options = sorted_users + sorted_groups %>

        <%= select_tag "settings[status_transition_rules][#{i}][check_user_id]",
                       options_from_collection_for_select(all_options, 'id', 'name', rule['check_user_id']) %>
      </td>
      <td>
        <%= select_tag "settings[status_transition_rules][#{i}][assign_user_id]",
                       options_from_collection_for_select(all_options, 'id', 'name', rule['assign_user_id']) %>
      </td>
      <td>
        <button type="button" class="remove-rule-button" onclick="removeRule(this)">Remove</button>
      </td>
    </tr>
  <% end %>
  </tbody>
</table>
</div>
<button type="button" onclick="addRule()">Add Rule</button>



<% statuses = IssueStatus.all.collect { |s| { id: s.id, name: s.name } } %>
<% custom_fields = CustomField.where(type: 'IssueCustomField').collect { |cf| { id: cf.id, name: cf.name } } %>
<% users = User.active.collect { |u| { id: u.id, name: u.name } } %>
<% groups = Group.all.collect { |g| { id: g.id, name: g.name } } %>
<script id="statuses-data" type="application/json">
  <%= raw statuses.to_json %>
</script>
<script id="custom-fields-data" type="application/json">
  <%= raw custom_fields.to_json %>
</script>
<script id="users-data" type="application/json">
  <%= raw users.to_json %>
</script>
<script id="groups-data" type="application/json">
  <%= raw groups.to_json %>
</script>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        window.addRule = function() {
            var index = document.querySelectorAll('.status-rule').length;
            var table = document.querySelector('#status-transition-rules tbody');

            var statuses = JSON.parse(document.getElementById('statuses-data').textContent);
            var statusOptions = statuses.map(function(status) {
                return `<option value="${status.id}">${status.name}</option>`;
            }).join('');

            var customFields = JSON.parse(document.getElementById('custom-fields-data').textContent);
            var customFieldOptions = customFields.map(function(field) {
                return `<option value="${field.id}">${field.name}</option>`;
            }).join('');

            var users = JSON.parse(document.getElementById('users-data').textContent);
            var userOptions = users.map(function(user) {
                return `<option value="${user.id}">${user.name}</option>`;
            }).join('');

            var groups = JSON.parse(document.getElementById('groups-data').textContent);
            var groupOptions = groups.map(function(group) {
                return `<option value="${group.id}">${group.name}</option>`;
            }).join('');

            var allOptions = userOptions + groupOptions; // Объединение пользователей и групп в один список

            var newRow = document.createElement('tr');
            newRow.classList.add('status-rule');
            newRow.dataset.index = index;
            newRow.innerHTML = `
            <td><input type="text" name="settings[status_transition_rules][${index}][button_label]" maxlength="24" /></td>
            <td><select name="settings[status_transition_rules][${index}][current_status]">${statusOptions}</select></td>
            <td><select name="settings[status_transition_rules][${index}][new_status]">${statusOptions}</select></td>
            <td><select name="settings[status_transition_rules][${index}][custom_field_id]">${customFieldOptions}</select></td>
            <td><select name="settings[status_transition_rules][${index}][check_user_id]">${allOptions}</select></td>
            <td><select name="settings[status_transition_rules][${index}][assign_user_id]">${allOptions}</select></td>
            <td><button type="button" onclick="removeRule(this)">Remove</button></td>
        `;
            table.appendChild(newRow);
        };

        window.removeRule = function(button) {
            var row = button.closest('tr');
            row.remove();
        };
    });
</script>
